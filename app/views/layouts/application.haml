-# NOTE: work in progress - this is ported to react
-# last steps: alert, modals

:ruby
  app = @app_layout_data
  config = app[:config]

  headerProps = app[:header]
    .merge(
      brand: {
        name: config[:site_title],
        logo: config[:brand_logo_url],
        provider: config[:brand_text],
        href: config[:root_path]
      },
      userMenu: app[:user_menu],
      loginLink: app[:login_link],
      authToken: app[:auth_token]
    )

  footerProps = {
    menu: app[:sitemap],
    provider: config[:brand_text],
    version: app[:version]
  }

  modal =
    if action_name == 'ask_delete' && (controller_name == 'media_entries' || controller_name == 'collections')
      react('Views.Collection.AskDelete', { get: @get })
    elsif action_name == 'edit_cover' && controller_name == 'collections'
      react('Views.Collection.ResourceSelection', { get: @get, type: 'radio' })
    elsif action_name == 'edit_highlights'  && controller_name == 'collections'
      react('Views.Collection.ResourceSelection', { get: @get, type: 'checkbox' })
    elsif action_name == 'export' && controller_name == 'media_entries'
      react('Views.MediaEntry.Export', { get: @get })
    elsif action_name == 'select_collection' && (controller_name == 'media_entries' || controller_name == 'collections')
      react('Views.SelectCollectionModal', { get: @get.collection_selection })
    end

- content_for(:body) do

  = modal

  #app.app{data: { view: request[:controller], action: request[:action] }}

    = react('App.AppHeader', headerProps)

    - if not modal
      = render('application/app_alerts')

    .app-body
      - if content_for?(:app_body)
        = content_for(:app_body)
      - elsif block_given?
        = yield

    .app-footer-push

  = react('App.AppFooter', footerProps)

= render template: 'layouts/_base'
